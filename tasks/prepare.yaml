---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    awscli_delegate_to: "{{ ansible_host }}"
    awscli_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/awscli', true) }}/{{ awscli_version }}"
  when:
    - awscli_direct_download

- name: get latest tags
  when:
    - awscli_version == "latest"
  become: false
  delegate_to: localhost
  run_once: true
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      bodsch.scm.github_latest:
        project: aws
        repository: aws-cli
        github_tags: true
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      register: _latest_release

    - name: re-define awscli_version
      ansible.builtin.set_fact:
        awscli_version: "{{ _latest_release.latest_release }}"

- name: update facts to get latest information
  ansible.builtin.setup:

- name: detect if awscli {{ awscli_version }} is present
  ansible.builtin.stat:
    path: "/usr/local/bin/aws_{{ awscli_version }}"
  register: awscli_versioned_installed

- name: define installed aws-cli version
  awscli_version:
    validate_version: "{{ awscli_version }}"
  register: awscli_installed_version
  check_mode: false
  ignore_errors: true

- name: define checksum
  when:
    - awscli_versioned_installed.stat.exists
  block:
    - name: detect checksum for awscli {{ awscli_version }}
      ansible.builtin.stat:
        path: /usr/local/aws-cli/v2/current/dist/aws
      register: stat_awscli_binary
      ignore_errors: true

    - name: define local fact for awscli
      ansible.builtin.set_fact:
        awscli_checksum: "{{ ansible_local.aws_cli.checksum }}"
      when:
        - ansible_local.aws_cli.checksum is defined
        - ansible_local.aws_cli.checksum | default('') | length > 0

    - name: define awscli download
      ansible.builtin.set_fact:
        awscli_download: false
      when:
        - (awscli_checksum | string | length != 0) or
          (awscli_checksum == stat_awscli_binary.stat.checksum)

- name: create download directory
  become: false
  delegate_to: "{{ awscli_delegate_to }}"
  ansible.builtin.file:
    path: "{{ awscli_local_tmp_directory }}"
    state: directory
    mode: "0750"
  when:
    - awscli_versioned_installed is defined
    - not awscli_versioned_installed.stat.exists

- name: define uninstall awscli
  ansible.builtin.set_fact:
    awscli_uninstall: "{{ awscli_installed_version.version.major is version_compare(awscli_version.split('.') | first, '<') }}"
  when:
    - awscli_installed_version is defined
    - awscli_installed_version.version is defined
    - awscli_installed_version.version.major is defined

- name: define reinstall awscli
  ansible.builtin.set_fact:
    awscli_reinstall: "{{ awscli_installed_version.full_version is version_compare(awscli_version, '!=') }}"
  when:
    - awscli_installed_version is defined
    - awscli_installed_version.version is defined
    - awscli_installed_version.version.major is defined

- name: install dependencies
  become: true
  ansible.builtin.package:
    name: "{{ awscli_dependencies }}"
    state: present
  when:
    - awscli_dependencies | default([]) | count > 0

- name: python support
  when:
    - awscli_python_packages is defined
    - awscli_python_packages | count > 0
  block:

    - name: create pip requirements file
      bodsch.core.pip_requirements:
        name: awscli
        requirements: "{{ awscli_python_packages }}"
      register: pip_requirements

    - name: fail if pip not installed
      ansible.builtin.fail:
        msg: python pip is not installed
      when:
        - not pip_requirements.pip.present

    - name: install awscli python packages  # noqa no-handler
      ansible.builtin.pip:
        requirements: "{{ pip_requirements.requirements_file }}"
        state: present
        extra_args: "{{ awscli_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"
      register: pip_install
      ignore_errors: true
      no_log: true
      when:
        - pip_requirements.requirements_file is defined
        - pip_requirements.changed

...
